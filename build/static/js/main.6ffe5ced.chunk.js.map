{"version":3,"sources":["images/circle-outline.svg","images/check-done.svg","images/list.svg","components/TodoItem.js","components/ProgressBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoItem","_this$props","this","props","item","onItemClicked","delItem","title","react_default","a","createElement","className","classNames","TodoItem-completed","isCompleted","src","checkDoneImg","checkImg","alt","onClick","id","React","Component","ProgressBar","percentNumber","todoItems","_this","temp","map","length","toFixed","style","width","concat","background","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createID","Math","random","toString","substring","Date","getTime","result","state","objectSpread","setState","quantityItemCompleted","isChecked","isCheck","onCheckAllClicked","addNewItem","e","text","target","value","trim","toConsumableArray","newItem","onKeyDown","keyCode","onChange","filter","_this2","_this$state","checkAll","type","placeholder","components_ProgressBar","index","components_TodoItem","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wSC2BzBC,mLApBJ,IAAAC,EACkCC,KAAKC,MAAtCC,EADDH,EACCG,KAAMC,EADPJ,EACOI,cAAeC,EADtBL,EACsBK,QACrBC,EAAUL,KAAKC,MAAMC,KAArBG,MACR,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAWC,IAAW,WAAY,CAChCC,qBAAsBT,EAAKU,eAE7BN,EAAAC,EAAAC,cAAA,OACEK,IAAKX,EAAKU,YAAcE,IAAeC,IACvCC,IAAI,GACJC,QAAS,kBAAMd,EAAcD,EAAKgB,OAEpCZ,EAAAC,EAAAC,cAAA,SAAIH,GACJC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUQ,QAAS,kBAAMb,EAAQF,EAAKgB,eAfzCC,IAAMC,WC0BdC,6MA7BbC,cAAgB,WAAM,IACZC,EAAcC,EAAKvB,MAAnBsB,UACJE,EAAO,EAMX,OALAF,EAAUG,IAAI,SAAAxB,GACRA,EAAKU,aACPa,OAGKA,EAAOF,EAAUI,OAAU,KAAKC,QAAQ,4EAIjD,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBT,KAAKsB,gBAAvC,KACAhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVoB,MAAO,CACLC,MAAK,GAAAC,OAAK/B,KAAKsB,gBAAV,KACLU,WAAU,GAAAD,OAAK/B,KAAKsB,gBAAkB,GAAK,UAAY,uBArB3CH,IAAMC,4BC6IjBa,cAzIb,SAAAA,IAAc,IAAAT,EAAA,OAAAU,OAAAC,EAAA,EAAAD,CAAAlC,KAAAiC,IACZT,EAAAU,OAAAE,EAAA,EAAAF,CAAAlC,KAAAkC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAtC,QAYFuC,SAAW,WACT,OACEC,KAAKC,SAASC,SAAS,IAAIC,UAAU,IACrC,IAAIC,MAAOC,UAAUH,SAAS,KAhBpBlB,EAoBdrB,cAAgB,SAACe,GAAO,IAEhB4B,EADgBtB,EAAKuB,MAAnBxB,UACiBG,IAAI,SAACxB,GAAD,OAC3BgB,IAAOhB,EAAKgB,GAAZgB,OAAAc,EAAA,EAAAd,CAAA,GAAsBhC,EAAtB,CAA4BU,aAAcV,EAAKU,cAA/CsB,OAAAc,EAAA,EAAAd,CAAA,GAAoEhC,KAEtEsB,EAAKyB,SACH,CACE1B,UAAWuB,GAEbtB,EAAK0B,wBA7BK1B,EAiCd2B,UAAY,WACV3B,EAAK4B,SAAW5B,EAAK4B,SAlCT5B,EAqCd6B,kBAAoB,WAClB7B,EAAK2B,YADmB,IAEhB5B,EAAcC,EAAKuB,MAAnBxB,UACRA,EAAUG,IAAI,SAACxB,GACbA,EAAKU,YAAcY,EAAK4B,UAE1B5B,EAAKyB,SAAS,CACZ1B,UAAWA,KA5CDC,EAgDd8B,WAAa,SAACC,GACZ,IAAIC,EAAOD,EAAEE,OAAOC,MACfF,IAGLA,EAAOA,EAAKG,SAIZnC,EAAKyB,SAAS,CACZ1B,UAAS,CACP,CAAEL,GAAIM,EAAKe,WAAYlC,MAAOmD,EAAM5C,aAAa,IAD1CmB,OAAAG,OAAA0B,EAAA,EAAA1B,CAEJV,EAAKuB,MAAMxB,YAEhBsC,QAAS,MA9DCrC,EAkEdsC,UAAY,SAACP,GACO,KAAdA,EAAEQ,SACJvC,EAAK8B,WAAWC,IApEN/B,EAwEdwC,SAAW,SAACT,GACV/B,EAAKyB,SAAS,CACZY,QAASN,EAAEE,OAAOC,SA1ERlC,EA8EdpB,QAAU,SAACc,GACT,IAAM4B,EAAStB,EAAKuB,MAAMxB,UAAU0C,OAAO,SAAC/D,GAC1C,GAAIgB,IAAOhB,EAAKgB,GACd,OAAOhB,IAGXsB,EAAKyB,SAAS,CACZ1B,UAAWuB,KAnFbtB,EAAKuB,MAAQ,CACXxB,UAAW,CACT,CAAEL,GAAI,EAAGb,MAAO,cAAeO,aAAa,GAC5C,CAAEM,GAAI,EAAGb,MAAO,UAAWO,aAAa,GACxC,CAAEM,GAAI,EAAGb,MAAO,qBAAsBO,aAAa,IAErDiD,QAAS,IAEXrC,EAAK4B,SAAU,EAVH5B,wEAqGL,IAAA0C,EAAAlE,KAAAmE,EACwBnE,KAAK+C,MAA5BxB,EADD4C,EACC5C,UAAWsC,EADZM,EACYN,QACnB,OACEvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKuD,IAAUpD,IAAI,GAAGC,QAASjB,KAAKqD,oBACzC/C,EAAAC,EAAAC,cAAA,SACE6D,KAAK,OACLX,MAAOG,EACPG,SAAUhE,KAAKgE,SACfM,YAAY,yBACZR,UAAW9D,KAAK8D,aAGE,IAArBvC,EAAUI,OACTrB,EAAAC,EAAAC,cAAC+D,EAAD,CAAahD,UAAWA,IACtB,KACHA,EAAUG,IAAI,SAACxB,EAAMsE,GAAP,OACblE,EAAAC,EAAAC,cAACiE,EAAD,CACEC,IAAKF,EACLtE,KAAMA,EACNC,cAAe+D,EAAK/D,cACpBC,QAAS8D,EAAK9D,YAGlBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,eAA4Cc,EAAUI,kBAlIhDR,IAAMC,WCOJuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6ffe5ced.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/circle-outline.aff1161b.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-done.d29f1779.svg\";","module.exports = __webpack_public_path__ + \"static/media/list.1885e818.svg\";","import React from 'react';\r\nimport './TodoItemStyle.css';\r\nimport classNames from 'classnames';\r\nimport checkImg from '../images/circle-outline.svg';\r\nimport checkDoneImg from '../images/check-done.svg';\r\n\r\nclass TodoItem extends React.Component {\r\n  render() {\r\n    const { item, onItemClicked, delItem } = this.props;\r\n    const { title } = this.props.item;\r\n    return (\r\n      <div\r\n        className={classNames('TodoItem', {\r\n          'TodoItem-completed': item.isCompleted\r\n        })}>\r\n        <img\r\n          src={item.isCompleted ? checkDoneImg : checkImg}\r\n          alt=\"\"\r\n          onClick={() => onItemClicked(item.id)}\r\n        />\r\n        <p>{title}</p>\r\n        <button className=\"btn-del\" onClick={() => delItem(item.id)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\n\r\nclass ProgressBar extends React.Component {\r\n  percentNumber = () => {\r\n    const { todoItems } = this.props;\r\n    let temp = 0;\r\n    todoItems.map(item => {\r\n      if (item.isCompleted) {\r\n        temp++;\r\n      }\r\n    });\r\n    return ((temp / todoItems.length) * 100).toFixed(0);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Wrapper-progress\">\r\n        <span className=\"number-percent\">{this.percentNumber()}%</span>\r\n        <div className=\"block-percent\">\r\n          <div\r\n            className=\"run-percent\"\r\n            style={{\r\n              width: `${this.percentNumber()}%`,\r\n              background: `${this.percentNumber() > 99 ? '#25ae88' : '#5ba4cf'}`\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\nimport TodoItem from \"./components/TodoItem\";\r\nimport ProgressBar from \"./components/ProgressBar\";\r\nimport checkAll from \"./images/list.svg\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todoItems: [\r\n        { id: 1, title: \"Get to work\", isCompleted: false },\r\n        { id: 2, title: \"Go home\", isCompleted: false },\r\n        { id: 3, title: \"Self study at home\", isCompleted: false },\r\n      ],\r\n      newItem: \"\",\r\n    };\r\n    this.isCheck = false;\r\n  }\r\n\r\n  createID = () => {\r\n    return (\r\n      Math.random().toString(36).substring(2) +\r\n      new Date().getTime().toString(36)\r\n    );\r\n  };\r\n\r\n  onItemClicked = (id) => {\r\n    const { todoItems } = this.state;\r\n    const result = todoItems.map((item) =>\r\n      id === item.id ? { ...item, isCompleted: !item.isCompleted } : { ...item }\r\n    );\r\n    this.setState(\r\n      {\r\n        todoItems: result,\r\n      },\r\n      this.quantityItemCompleted\r\n    );\r\n  };\r\n\r\n  isChecked = () => {\r\n    this.isCheck = !this.isCheck;\r\n  };\r\n\r\n  onCheckAllClicked = () => {\r\n    this.isChecked();\r\n    const { todoItems } = this.state;\r\n    todoItems.map((item) => {\r\n      item.isCompleted = this.isCheck;\r\n    });\r\n    this.setState({\r\n      todoItems: todoItems,\r\n    });\r\n  };\r\n\r\n  addNewItem = (e) => {\r\n    let text = e.target.value;\r\n    if (!text) {\r\n      return;\r\n    }\r\n    text = text.trim();\r\n    if (!text) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      todoItems: [\r\n        { id: this.createID(), title: text, isCompleted: false },\r\n        ...this.state.todoItems,\r\n      ],\r\n      newItem: \"\",\r\n    });\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    if (e.keyCode === 13) {\r\n      this.addNewItem(e);\r\n    }\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      newItem: e.target.value,\r\n    });\r\n  };\r\n\r\n  delItem = (id) => {\r\n    const result = this.state.todoItems.filter((item) => {\r\n      if (id !== item.id) {\r\n        return item;\r\n      }\r\n    });\r\n    this.setState({\r\n      todoItems: result,\r\n    });\r\n  };\r\n\r\n  // quantityItemCompleted = () => {\r\n  //   const { todoItems, itemsCompleted } = this.state;\r\n  //   todoItems.filter(item => {\r\n  //     if (item.isCompleted) {\r\n  //       itemsCompleted.push(item);\r\n  //     }\r\n  //   });\r\n  //   this.setState({\r\n  //     itemsCompleted: todoItems.length - itemsCompleted.length\r\n  //   });\r\n  // };\r\n\r\n  render() {\r\n    const { todoItems, newItem } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>todos</h1>\r\n        <div className=\"wrapper\">\r\n          <div className=\"Header\">\r\n            <img src={checkAll} alt=\"\" onClick={this.onCheckAllClicked} />\r\n            <input\r\n              type=\"text\"\r\n              value={newItem}\r\n              onChange={this.onChange}\r\n              placeholder=\"What needs to be done?\"\r\n              onKeyDown={this.onKeyDown}\r\n            />\r\n          </div>\r\n          {todoItems.length !== 0 ? (\r\n            <ProgressBar todoItems={todoItems} />\r\n          ) : null}\r\n          {todoItems.map((item, index) => (\r\n            <TodoItem\r\n              key={index}\r\n              item={item}\r\n              onItemClicked={this.onItemClicked}\r\n              delItem={this.delItem}\r\n            />\r\n          ))}\r\n          <div className=\"Footer\">\r\n            <div className=\"quantity-list\">List items: {todoItems.length}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}